<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScintillaNET.WPF</name>
    </assembly>
    <members>
        <member name="T:ScintillaNET.WPF.ScintillaWPF">
            <summary>
            ScintillaWPF
            </summary>
        </member>
        <member name="F:ScintillaNET.WPF.ScintillaWPF.InvalidPosition">
            <summary>
            A constant used to specify an invalid document position.
            </summary>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AdditionalCaretForeColor">
            <summary>
            Gets or sets the caret foreground color for additional selections.
            </summary>
            <returns>The caret foreground color in additional selections. The default is (127, 127, 127).</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AdditionalCaretsBlink">
            <summary>
            Gets or sets whether the carets in additional selections will blink.
            </summary>
            <returns>true if additional selection carets should blink; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AdditionalCaretsVisible">
            <summary>
            Gets or sets whether the carets in additional selections are visible.
            </summary>
            <returns>true if additional selection carets are visible; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AdditionalSelAlpha">
            <summary>
            Gets or sets the alpha transparency of additional multiple selections.
            </summary>
            <returns>
            The alpha transparency ranging from 0 (completely transparent) to 255 (completely opaque).
            The value 256 will disable alpha transparency. The default is 256.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AdditionalSelectionTyping">
            <summary>
            Gets or sets whether additional typing affects multiple selections.
            </summary>
            <returns>true if typing will affect multiple selections instead of just the main selection; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AnchorPosition">
            <summary>
            Gets or sets the current anchor position.
            </summary>
            <returns>The zero-based character position of the anchor.</returns>
            <remarks>
            Setting the current anchor position will create a selection between it and the <see cref="P:ScintillaNET.WPF.ScintillaWPF.CurrentPosition" />.
            The caret is not scrolled into view.
            </remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.ScrollCaret" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AnnotationVisible">
            <summary>
            Gets or sets the display of annotations.
            </summary>
            <returns>One of the <see cref="T:ScintillaNET.Annotation" /> enumeration values. The default is <see cref="F:ScintillaNET.Annotation.Hidden" />.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCActive">
            <summary>
            Gets a value indicating whether there is an autocompletion list displayed.
            </summary>
            <returns>true if there is an active autocompletion list; otherwise, false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCAutoHide">
            <summary>
            Gets or sets whether to automatically cancel autocompletion when there are no viable matches.
            </summary>
            <returns>
            true to automatically cancel autocompletion when there is no possible match; otherwise, false.
            The default is true.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCCancelAtStart">
            <summary>
            Gets or sets whether to cancel an autocompletion if the caret moves from its initial location,
            or is allowed to move to the word start.
            </summary>
            <returns>
            true to cancel autocompletion when the caret moves.
            false to allow the caret to move to the beginning of the word without cancelling autocompletion.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCCurrent">
            <summary>
            Gets the index of the current autocompletion list selection.
            </summary>
            <returns>The zero-based index of the current autocompletion selection.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCChooseSingle">
            <summary>
            Gets or sets whether to automatically select an item when it is the only one in an autocompletion list.
            </summary>
            <returns>
            true to automatically choose the only autocompletion item and not display the list; otherwise, false.
            The default is false.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCDropRestOfWord">
            <summary>
            Gets or sets whether to delete any word characters following the caret after an autocompletion.
            </summary>
            <returns>
            true to delete any word characters following the caret after autocompletion; otherwise, false.
            The default is false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCIgnoreCase">
            <summary>
            Gets or sets whether matching characters to an autocompletion list is case-insensitive.
            </summary>
            <returns>true to use case-insensitive matching; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCMaxHeight">
            <summary>
            Gets or sets the maximum height of the autocompletion list measured in rows.
            </summary>
            <returns>The max number of rows to display in an autocompletion window. The default is 5.</returns>
            <remarks>If there are more items in the list than max rows, a vertical scrollbar is shown.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCMaxWidth">
            <summary>
            Gets or sets the width in characters of the autocompletion list.
            </summary>
            <returns>
            The width of the autocompletion list expressed in characters, or 0 to automatically set the width
            to the longest item. The default is 0.
            </returns>
            <remarks>Any items that cannot be fully displayed will be indicated with ellipsis.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCOrder">
            <summary>
            Gets or sets the autocompletion list sort order to expect when calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.AutoCShow(System.Int32,System.String)" />.
            </summary>
            <returns>One of the <see cref="T:ScintillaNET.Order" /> enumeration values. The default is <see cref="F:ScintillaNET.Order.Presorted" />.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCPosStart">
            <summary>
            Gets the document position at the time <see cref="M:ScintillaNET.WPF.ScintillaWPF.AutoCShow(System.Int32,System.String)" /> was called.
            </summary>
            <returns>The zero-based document position at the time <see cref="M:ScintillaNET.WPF.ScintillaWPF.AutoCShow(System.Int32,System.String)" /> was called.</returns>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.AutoCShow(System.Int32,System.String)" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCSeparator">
            <summary>
            Gets or sets the delimiter character used to separate words in an autocompletion list.
            </summary>
            <returns>The separator character used when calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.AutoCShow(System.Int32,System.String)" />. The default is the space character.</returns>
            <remarks>The <paramref name="value" /> specified should be limited to printable ASCII characters.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutoCTypeSeparator">
            <summary>
            Gets or sets the delimiter character used to separate words and image type identifiers in an autocompletion list.
            </summary>
            <returns>The separator character used to reference an image registered with <see cref="M:ScintillaNET.WPF.ScintillaWPF.RegisterRgbaImage(System.Int32,System.Drawing.Bitmap)" />. The default is '?'.</returns>
            <remarks>The <paramref name="value" /> specified should be limited to printable ASCII characters.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.AutomaticFold">
            <summary>
            Gets or sets the automatic folding flags.
            </summary>
            <returns>
            A bitwise combination of the <see cref="T:ScintillaNET.AutomaticFold" /> enumeration.
            The default is <see cref="F:ScintillaNET.AutomaticFold.None" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.BackColor">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.BackgroundImage">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.BackgroundImageLayout">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.BorderStyle">
            <summary>
            Gets or sets the border type of the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> control.
            </summary>
            <returns>A BorderStyle enumeration value that represents the border type of the control. The default is Fixed3D.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">A value that is not within the range of valid values for the enumeration was assigned to the property.</exception>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.BufferedDraw">
            <summary>
            Gets or sets whether drawing is double-buffered.
            </summary>
            <returns>
            true to draw each line into an offscreen bitmap first before copying it to the screen; otherwise, false.
            The default is true.
            </returns>
            <remarks>Disabling buffer can improve performance but will cause flickering.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CallTipActive">
            <summary>
            Gets a value indicating whether there is a call tip window displayed.
            </summary>
            <returns>true if there is an active call tip window; otherwise, false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CanPaste">
            <summary>
            Gets a value indicating whether there is text on the clipboard that can be pasted into the document.
            </summary>
            <returns>true when there is text on the clipboard to paste; otherwise, false.</returns>
            <remarks>The document cannot be <see cref="P:ScintillaNET.WPF.ScintillaWPF.ReadOnly" />  and the selection cannot contain protected text.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CanRedo">
            <summary>
            Gets a value indicating whether there is an undo action to redo.
            </summary>
            <returns>true when there is something to redo; otherwise, false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CanUndo">
            <summary>
            Gets a value indicating whether there is an action to undo.
            </summary>
            <returns>true when there is something to undo; otherwise, false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CaretForeColor">
            <summary>
            Gets or sets the caret foreground color.
            </summary>
            <returns>The caret foreground color. The default is black.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CaretLineBackColor">
            <summary>
            Gets or sets the caret line background color.
            </summary>
            <returns>The caret line background color. The default is yellow.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CaretLineBackColorAlpha">
            <summary>
            Gets or sets the alpha transparency of the <see cref="P:ScintillaNET.WPF.ScintillaWPF.CaretLineBackColor" />.
            </summary>
            <returns>
            The alpha transparency ranging from 0 (completely transparent) to 255 (completely opaque).
            The value 256 will disable alpha transparency. The default is 256.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CaretLineVisible">
            <summary>
            Gets or sets whether the caret line is visible (highlighted).
            </summary>
            <returns>true if the caret line is visible; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CaretPeriod">
            <summary>
            Gets or sets the caret blink rate in milliseconds.
            </summary>
            <returns>The caret blink rate measured in milliseconds. The default is 530.</returns>
            <remarks>A value of 0 will stop the caret blinking.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CaretStyle">
            <summary>
            Gets or sets the caret display style.
            </summary>
            <returns>
            One of the <see cref="T:ScintillaNET.CaretStyle" /> enumeration values.
            The default is <see cref="F:ScintillaNET.CaretStyle.Line" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CaretWidth">
            <summary>
            Gets or sets the width in pixels of the caret.
            </summary>
            <returns>The width of the caret in pixels. The default is 1 pixel.</returns>
            <remarks>
            The caret width can only be set to a value of 0, 1, 2 or 3 pixels and is only effective
            when the <see cref="P:ScintillaNET.WPF.ScintillaWPF.CaretStyle" /> property is set to <see cref="F:ScintillaNET.CaretStyle.Line" />.
            </remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CurrentLine">
            <summary>
            Gets the current line index.
            </summary>
            <returns>The zero-based line index containing the <see cref="P:ScintillaNET.WPF.ScintillaWPF.CurrentPosition" />.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.CurrentPosition">
            <summary>
            Gets or sets the current caret position.
            </summary>
            <returns>The zero-based character position of the caret.</returns>
            <remarks>
            Setting the current caret position will create a selection between it and the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.AnchorPosition" />.
            The caret is not scrolled into view.
            </remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.ScrollCaret" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Cursor">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.DefaultCursor">
            <summary>
            Gets or sets the default cursor for the control.
            </summary>
            <returns>An object of type Cursor representing the current default cursor.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Document">
            <summary>
            Gets or sets the current document used by the control.
            </summary>
            <returns>The current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Document" />.</returns>
            <remarks>
            Setting this property is equivalent to calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.ReleaseDocument(ScintillaNET.Document)" /> on the current document, and
            calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.CreateDocument" /> if the new <paramref name="value" /> is <see cref="F:ScintillaNET.Document.Empty" /> or
            <see cref="M:ScintillaNET.WPF.ScintillaWPF.AddRefDocument(ScintillaNET.Document)" /> if the new <paramref name="value" /> is not <see cref="F:ScintillaNET.Document.Empty" />.
            </remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.EdgeColor">
            <summary>
            Gets or sets the background color to use when indicating long lines with
            <see cref="F:ScintillaNET.EdgeMode.Background" />.
            </summary>
            <returns>The background Color. The default is Silver.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.EdgeColumn">
            <summary>
            Gets or sets the column number at which to begin indicating long lines.
            </summary>
            <returns>The number of columns in a long line. The default is 0.</returns>
            <remarks>
            When using <see cref="F:ScintillaNET.EdgeMode.Line"/>, a column is defined as the width of a space character in the <see cref="F:ScintillaNET.Style.Default" /> style.
            When using <see cref="F:ScintillaNET.EdgeMode.Background" /> a column is equal to a character (including tabs).
            </remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.EdgeMode">
            <summary>
            Gets or sets the mode for indicating long lines.
            </summary>
            <returns>
            One of the <see cref="T:ScintillaNET.EdgeMode" /> enumeration values.
            The default is <see cref="F:ScintillaNET.EdgeMode.None" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.EndAtLastLine">
            <summary>
            Gets or sets whether vertical scrolling ends at the last line or can scroll past.
            </summary>
            <returns>true if the maximum vertical scroll position ends at the last line; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.EolMode">
            <summary>
            Gets or sets the end-of-line mode, or rather, the characters added into
            the document when the user presses the Enter key.
            </summary>
            <returns>One of the <see cref="T:ScintillaNET.Eol" /> enumeration values. The default is <see cref="F:ScintillaNET.Eol.CrLf" />.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.ExtraAscent">
            <summary>
            Gets or sets the amount of whitespace added to the ascent (top) of each line.
            </summary>
            <returns>The extra line ascent. The default is zero.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.ExtraDescent">
            <summary>
            Gets or sets the amount of whitespace added to the descent (bottom) of each line.
            </summary>
            <returns>The extra line descent. The default is zero.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.FirstVisibleLine">
            <summary>
            Gets or sets the first visible line on screen.
            </summary>
            <returns>The zero-based index of the first visible screen line.</returns>
            <remarks>The value is a visible line, not a document line.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Font">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.FontQuality">
            <summary>
            Gets or sets font quality (anti-aliasing method) used to render fonts.
            </summary>
            <returns>
            One of the <see cref="T:ScintillaNET.FontQuality" /> enumeration values.
            The default is <see cref="F:ScintillaNET.FontQuality.Default" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.ForeColor">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.HighlightGuide">
            <summary>
            Gets or sets the column number of the indentation guide to highlight.
            </summary>
            <returns>The column number of the indentation guide to highlight or 0 if disabled.</returns>
            <remarks>Guides are highlighted in the <see cref="F:ScintillaNET.Style.BraceLight" /> style. Column numbers can be determined by calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.GetColumn(System.Int32)" />.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.HScrollBar">
            <summary>
            Gets or sets whether to display the horizontal scroll bar.
            </summary>
            <returns>true to display the horizontal scroll bar when needed; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.IdleStyling">
            <summary>
            Gets or sets the strategy used to perform styling using application idle time.
            </summary>
            <returns>
            One of the <see cref="T:ScintillaNET.IdleStyling" /> enumeration values.
            The default is <see cref="F:ScintillaNET.IdleStyling.None" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.IndentWidth">
            <summary>
            Gets or sets the size of indentation in terms of space characters.
            </summary>
            <returns>The indentation size measured in characters. The default is 0.</returns>
            <remarks> A value of 0 will make the indent width the same as the tab width.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.IndentationGuides">
            <summary>
            Gets or sets whether to display indentation guides.
            </summary>
            <returns>One of the <see cref="T:ScintillaNET.IndentView" /> enumeration values. The default is <see cref="F:ScintillaNET.IndentView.None" />.</returns>
            <remarks>The <see cref="F:ScintillaNET.Style.IndentGuide" /> style can be used to specify the foreground and background color of indentation guides.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.IndicatorCurrent">
            <summary>
            Gets or sets the indicator used in a subsequent call to <see cref="M:ScintillaNET.WPF.ScintillaWPF.IndicatorFillRange(System.Int32,System.Int32)" /> or <see cref="M:ScintillaNET.WPF.ScintillaWPF.IndicatorClearRange(System.Int32,System.Int32)" />.
            </summary>
            <returns>The zero-based indicator index to apply when calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.IndicatorFillRange(System.Int32,System.Int32)" /> or remove when calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.IndicatorClearRange(System.Int32,System.Int32)" />.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Indicators">
            <summary>
            Gets a collection of objects for working with indicators.
            </summary>
            <returns>A collection of <see cref="T:ScintillaNET.Indicator" /> objects.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.IndicatorValue">
            <summary>
            Gets or sets the user-defined value used in a subsequent call to <see cref="M:ScintillaNET.WPF.ScintillaWPF.IndicatorFillRange(System.Int32,System.Int32)" />.
            </summary>
            <returns>The indicator value to apply when calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.IndicatorFillRange(System.Int32,System.Int32)" />.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Lexer">
            <summary>
            Gets or sets the current lexer.
            </summary>
            <returns>One of the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" /> enumeration values. The default is <see cref="F:ScintillaNET.Lexer.Container" />.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.LexerLanguage">
            <summary>
            Gets or sets the current lexer by name.
            </summary>
            <returns>A String representing the current lexer.</returns>
            <remarks>Lexer names are case-sensitive.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.LineEndTypesActive">
            <summary>
            Gets the combined result of the <see cref="P:ScintillaNET.WPF.ScintillaWPF.LineEndTypesSupported" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.LineEndTypesAllowed" />
            properties to report the line end types actively being interpreted.
            </summary>
            <returns>A bitwise combination of the <see cref="T:ScintillaNET.LineEndType" /> enumeration.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.LineEndTypesAllowed">
            <summary>
            Gets or sets the line ending types interpreted by the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> control.
            </summary>
            <returns>
            A bitwise combination of the <see cref="T:ScintillaNET.LineEndType" /> enumeration.
            The default is <see cref="F:ScintillaNET.LineEndType.Default" />.
            </returns>
            <remarks>The line ending types allowed must also be supported by the current lexer to be effective.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.LineEndTypesSupported">
            <summary>
            Gets the different types of line ends supported by the current lexer.
            </summary>
            <returns>A bitwise combination of the <see cref="T:ScintillaNET.LineEndType" /> enumeration.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Lines">
            <summary>
            Gets a collection representing lines of text in the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> control.
            </summary>
            <returns>A collection of text lines.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.LinesOnScreen">
            <summary>
            Gets the number of lines that can be shown on screen given a constant
            line height and the space available.
            </summary>
            <returns>
            The number of screen lines which could be displayed (including any partial lines).
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.MainSelection">
            <summary>
            Gets or sets the main selection when their are multiple selections.
            </summary>
            <returns>The zero-based main selection index.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Margins">
            <summary>
            Gets a collection representing margins in a <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> control.
            </summary>
            <returns>A collection of margins.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Markers">
            <summary>
            Gets a collection representing markers in a <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> control.
            </summary>
            <returns>A collection of markers.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Modified">
            <summary>
            Gets a value indicating whether the document has been modified (is dirty)
            since the last call to <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetSavePoint" />.
            </summary>
            <returns>true if the document has been modified; otherwise, false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.MouseDwellTime">
            <summary>
            Gets or sets the time in milliseconds the mouse must linger to generate a <see cref="E:ScintillaNET.WPF.ScintillaWPF.DwellStart" /> event.
            </summary>
            <returns>
            The time in milliseconds the mouse must linger to generate a <see cref="E:ScintillaNET.WPF.ScintillaWPF.DwellStart" /> event
            or <see cref="F:ScintillaNET.Scintilla.TimeForever" /> if dwell events are disabled.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.MouseSelectionRectangularSwitch">
            <summary>
            Gets or sets the ability to switch to rectangular selection mode while making a selection with the mouse.
            </summary>
            <returns>
            true if the current mouse selection can be switched to a rectangular selection by pressing the ALT key; otherwise, false.
            The default is false.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.MultipleSelection">
            <summary>
            Gets or sets whether multiple selection is enabled.
            </summary>
            <returns>
            true if multiple selections can be made by holding the CTRL key and dragging the mouse; otherwise, false.
            The default is false.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.MultiPaste">
            <summary>
            Gets or sets the behavior when pasting text into multiple selections.
            </summary>
            <returns>One of the <see cref="T:ScintillaNET.MultiPaste" /> enumeration values. The default is <see cref="F:ScintillaNET.MultiPaste.Once" />.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Overtype">
            <summary>
            Gets or sets whether to write over text rather than insert it.
            </summary>
            <return>true to write over text; otherwise, false. The default is false.</return>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Padding">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.PasteConvertEndings">
            <summary>
            Gets or sets whether line endings in pasted text are convereted to the document <see cref="P:ScintillaNET.WPF.ScintillaWPF.EolMode" />.
            </summary>
            <returns>true to convert line endings in pasted text; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.PhasesDraw">
            <summary>
            Gets or sets the number of phases used when drawing.
            </summary>
            <returns>One of the <see cref="T:ScintillaNET.Phases" /> enumeration values. The default is <see cref="F:ScintillaNET.Phases.Two" />.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.ReadOnly">
            <summary>
            Gets or sets whether the document is read-only.
            </summary>
            <returns>true if the document is read-only; otherwise, false. The default is false.</returns>
            <seealso cref="E:ScintillaNET.WPF.ScintillaWPF.ModifyAttempt" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.RectangularSelectionAnchor">
            <summary>
            Gets or sets the anchor position of the rectangular selection.
            </summary>
            <returns>The zero-based document position of the rectangular selection anchor.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.RectangularSelectionAnchorVirtualSpace">
            <summary>
            Gets or sets the amount of anchor virtual space in a rectangular selection.
            </summary>
            <returns>The amount of virtual space past the end of the line offsetting the rectangular selection anchor.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.RectangularSelectionCaret">
            <summary>
            Gets or sets the caret position of the rectangular selection.
            </summary>
            <returns>The zero-based document position of the rectangular selection caret.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.RectangularSelectionCaretVirtualSpace">
            <summary>
            Gets or sets the amount of caret virtual space in a rectangular selection.
            </summary>
            <returns>The amount of virtual space past the end of the line offsetting the rectangular selection caret.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.ScrollWidth">
            <summary>
            Gets or sets the range of the horizontal scroll bar.
            </summary>
            <returns>The range in pixels of the horizontal scroll bar. The default is 2000.</returns>
            <remarks>The width will automatically increase as needed when <see cref="P:ScintillaNET.WPF.ScintillaWPF.ScrollWidthTracking" /> is enabled.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.ScrollWidthTracking">
            <summary>
            Gets or sets whether the <see cref="P:ScintillaNET.WPF.ScintillaWPF.ScrollWidth" /> is automatically increased as needed.
            </summary>
            <returns>
            true to automatically increase the horizontal scroll width as needed; otherwise, false.
            The default is true.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.SearchFlags">
            <summary>
            Gets or sets the search flags used when searching text.
            </summary>
            <returns>A bitwise combination of <see cref="T:ScintillaNET.SearchFlags" /> values. The default is <see cref="F:ScintillaNET.SearchFlags.None" />.</returns>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SearchInTarget(System.String)" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.SelectedText">
            <summary>
            Gets the selected text.
            </summary>
            <returns>The selected text if there is any; otherwise, an empty string.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.SelectionEnd">
            <summary>
            Gets or sets the end position of the selection.
            </summary>
            <returns>The zero-based document position where the selection ends.</returns>
            <remarks>
            When getting this property, the return value is <code>Math.Max(<see cref="P:ScintillaNET.WPF.ScintillaWPF.AnchorPosition" />, <see cref="P:ScintillaNET.WPF.ScintillaWPF.CurrentPosition" />)</code>.
            When setting this property, <see cref="P:ScintillaNET.WPF.ScintillaWPF.CurrentPosition" /> is set to the value specified and <see cref="P:ScintillaNET.WPF.ScintillaWPF.AnchorPosition" /> set to <code>Math.Min(<see cref="P:ScintillaNET.WPF.ScintillaWPF.AnchorPosition" />, <paramref name="value" />)</code>.
            The caret is not scrolled into view.
            </remarks>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.SelectionStart" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.SelectionEolFilled">
            <summary>
            Gets or sets whether to fill past the end of a line with the selection background color.
            </summary>
            <returns>true to fill past the end of the line; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Selections">
            <summary>
            Gets a collection representing multiple selections in a <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> control.
            </summary>
            <returns>A collection of selections.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.SelectionStart">
            <summary>
            Gets or sets the start position of the selection.
            </summary>
            <returns>The zero-based document position where the selection starts.</returns>
            <remarks>
            When getting this property, the return value is <code>Math.Min(<see cref="P:ScintillaNET.WPF.ScintillaWPF.AnchorPosition" />, <see cref="P:ScintillaNET.WPF.ScintillaWPF.CurrentPosition" />)</code>.
            When setting this property, <see cref="P:ScintillaNET.WPF.ScintillaWPF.AnchorPosition" /> is set to the value specified and <see cref="P:ScintillaNET.WPF.ScintillaWPF.CurrentPosition" /> set to <code>Math.Max(<see cref="P:ScintillaNET.WPF.ScintillaWPF.CurrentPosition" />, <paramref name="value" />)</code>.
            The caret is not scrolled into view.
            </remarks>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.SelectionEnd" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Status">
            <summary>
            Gets or sets the last internal error code used by Scintilla.
            </summary>
            <returns>
            One of the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Status" /> enumeration values.
            The default is <see cref="F:ScintillaNET.Status.Ok" />.
            </returns>
            <remarks>The status can be reset by setting the property to <see cref="F:ScintillaNET.Status.Ok" />.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Styles">
            <summary>
            Gets a collection representing style definitions in a <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> control.
            </summary>
            <returns>A collection of style definitions.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.TabDrawMode">
            <summary>
            Gets or sets how tab characters are represented when whitespace is visible.
            </summary>
            <returns>
            One of the <see cref="T:ScintillaNET.TabDrawMode" /> enumeration values.
            The default is <see cref="F:ScintillaNET.TabDrawMode.LongArrow" />.
            </returns>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.ViewWhitespace" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.TabWidth">
            <summary>
            Gets or sets the width of a tab as a multiple of a space character.
            </summary>
            <returns>The width of a tab measured in characters. The default is 4.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd">
            <summary>
            Gets or sets the end position used when performing a search or replace.
            </summary>
            <returns>The zero-based character position within the document to end a search or replace operation.</returns>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart"/>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SearchInTarget(System.String)" />
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.ReplaceTarget(System.String)" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.TargetStart">
            <summary>
            Gets or sets the start position used when performing a search or replace.
            </summary>
            <returns>The zero-based character position within the document to start a search or replace operation.</returns>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd"/>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SearchInTarget(System.String)" />
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.ReplaceTarget(System.String)" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.TargetText">
            <summary>
            Gets the current target text.
            </summary>
            <returns>A String representing the text between <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" />.</returns>
            <remarks>Targets which have a start position equal or greater to the end position will return an empty String.</remarks>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" />
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Technology">
            <summary>
            Gets or sets the rendering technology used.
            </summary>
            <returns>
            One of the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Technology" /> enumeration values.
            The default is <see cref="F:ScintillaNET.Technology.Default" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Text">
            <summary>
            Gets or sets the current document text in the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> control.
            </summary>
            <returns>The text displayed in the control.</returns>
            <remarks>Depending on the length of text get or set, this operation can be expensive.</remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.TextLength">
            <summary>
            Gets the length of the text in the control.
            </summary>
            <returns>The number of characters in the document.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.UseTabs">
            <summary>
            Gets or sets whether to use a mixture of tabs and spaces for indentation or purely spaces.
            </summary>
            <returns>true to use tab characters; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.UseWaitCursor">
            <summary>
            Gets or sets a value indicating whether to use the wait cursor for the current control.
            </summary>
            <returns>true to use the wait cursor for the current control; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.ViewEol">
            <summary>
            Gets or sets the visibility of end-of-line characters.
            </summary>
            <returns>true to display end-of-line characters; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.ViewWhitespace">
            <summary>
            Gets or sets how to display whitespace characters.
            </summary>
            <returns>One of the <see cref="T:ScintillaNET.WhitespaceMode" /> enumeration values. The default is <see cref="F:ScintillaNET.WhitespaceMode.Invisible" />.</returns>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetWhitespaceForeColor(System.Boolean,System.Windows.Media.Color)" />
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetWhitespaceBackColor(System.Boolean,System.Windows.Media.Color)" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.VirtualSpaceOptions">
            <summary>
            Gets or sets the ability for the caret to move into an area beyond the end of each line, otherwise known as virtual space.
            </summary>
            <returns>
            A bitwise combination of the <see cref="T:ScintillaNET.VirtualSpace" /> enumeration.
            The default is <see cref="F:ScintillaNET.VirtualSpace.None" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.VScrollBar">
            <summary>
            Gets or sets whether to display the vertical scroll bar.
            </summary>
            <returns>true to display the vertical scroll bar when needed; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.WhitespaceSize">
            <summary>
            Gets or sets the size of the dots used to mark whitespace.
            </summary>
            <returns>The size of the dots used to mark whitespace. The default is 1.</returns>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.ViewWhitespace" />
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.WordChars">
            <summary>
            Gets or sets the characters considered 'word' characters when using any word-based logic.
            </summary>
            <returns>A string of word characters.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.WrapIndentMode">
            <summary>
            Gets or sets the line wrapping indent mode.
            </summary>
            <returns>
            One of the <see cref="T:ScintillaNET.WrapIndentMode" /> enumeration values.
            The default is <see cref="F:ScintillaNET.WrapIndentMode.Fixed" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.WrapMode">
            <summary>
            Gets or sets the line wrapping mode.
            </summary>
            <returns>
            One of the <see cref="T:ScintillaNET.WrapMode" /> enumeration values.
            The default is <see cref="F:ScintillaNET.WrapMode.None" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.WrapStartIndent">
            <summary>
            Gets or sets the indented size in pixels of wrapped sublines.
            </summary>
            <returns>The indented size of wrapped sublines measured in pixels. The default is 0.</returns>
            <remarks>
            Setting <see cref="P:ScintillaNET.WPF.ScintillaWPF.WrapVisualFlags" /> to <see cref="F:ScintillaNET.WrapVisualFlags.Start" /> will add an
            additional 1 pixel to the value specified.
            </remarks>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.WrapVisualFlags">
            <summary>
            Gets or sets the wrap visual flags.
            </summary>
            <returns>
            A bitwise combination of the <see cref="T:ScintillaNET.WrapVisualFlags" /> enumeration.
            The default is <see cref="F:ScintillaNET.WrapVisualFlags.None" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.WrapVisualFlagLocation">
            <summary>
            Gets or sets additional location options when displaying wrap visual flags.
            </summary>
            <returns>
            One of the <see cref="T:ScintillaNET.WrapVisualFlagLocation" /> enumeration values.
            The default is <see cref="F:ScintillaNET.WrapVisualFlagLocation.Default" />.
            </returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.XOffset">
            <summary>
            Gets or sets the horizontal scroll offset.
            </summary>
            <returns>The horizontal scroll offset in pixels.</returns>
        </member>
        <member name="P:ScintillaNET.WPF.ScintillaWPF.Zoom">
            <summary>
            Gets or sets the zoom factor.
            </summary>
            <returns>The zoom factor measured in points.</returns>
            <remarks>For best results, values should range from -10 to 20 points.</remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.ZoomIn" />
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.ZoomOut" />
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.AutoCCancelled">
            <summary>
            Occurs when an autocompletion list is cancelled.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.AutoCCharDeleted">
            <summary>
            Occurs when the user deletes a character while an autocompletion list is active.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.AutoCCompleted">
            <summary>
            Occurs after autocompleted text is inserted.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.AutoCSelection">
            <summary>
            Occurs when a user has selected an item in an autocompletion list.
            </summary>
            <remarks>Automatic insertion can be cancelled by calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.AutoCCancel" /> from the event handler.</remarks>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.BackColorChanged">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.BackgroundImageChanged">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.BackgroundImageLayoutChanged">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.BeforeDelete">
            <summary>
            Occurs when text is about to be deleted.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.BeforeInsert">
            <summary>
            Occurs when text is about to be inserted.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.BorderStyleChanged">
            <summary>
            Occurs when the value of the <see cref="P:ScintillaNET.Scintilla.BorderStyle" /> property has changed.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.ChangeAnnotation">
            <summary>
            Occurs when an annotation has changed.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.CharAdded">
            <summary>
            Occurs when the user enters a text character.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.CursorChanged">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.Delete">
            <summary>
            Occurs when text has been deleted from the document.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.DoubleClick">
            <summary>
            Occurs when the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> control is double-clicked.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.DwellEnd">
            <summary>
            Occurs when the mouse moves or another activity such as a key press ends a <see cref="E:ScintillaNET.WPF.ScintillaWPF.DwellStart" /> event.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.DwellStart">
            <summary>
            Occurs when the mouse is kept in one position (hovers) for the <see cref="P:ScintillaNET.WPF.ScintillaWPF.MouseDwellTime" />.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.FontChanged">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.ForeColorChanged">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.HotspotClick">
            <summary>
            Occurs when the user clicks on text that is in a style with the <see cref="P:ScintillaNET.Style.Hotspot" /> property set.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.HotspotDoubleClick">
            <summary>
            Occurs when the user double clicks on text that is in a style with the <see cref="P:ScintillaNET.Style.Hotspot" /> property set.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.HotspotReleaseClick">
            <summary>
            Occurs when the user releases a click on text that is in a style with the <see cref="P:ScintillaNET.Style.Hotspot" /> property set.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.IndicatorClick">
            <summary>
            Occurs when the user clicks on text that has an indicator.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.IndicatorRelease">
            <summary>
            Occurs when the user releases a click on text that has an indicator.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.Insert">
            <summary>
            Occurs when text has been inserted into the document.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.InsertCheck">
            <summary>
            Occurs when text is about to be inserted. The inserted text can be changed.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.KeyDown">
            <summary>
            Occurs when a key is pressed while the control has focus.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.MouseDown">
            <summary>
            Occurs when the mouse is over the control and the mouse button is pressed.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.MouseUp">
            <summary>
            Occurs when the mouse is over the control and the mouse button is released.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.MarginClick">
            <summary>
            Occurs when the mouse was clicked inside a margin that was marked as sensitive.
            </summary>
            <remarks>The <see cref="P:ScintillaNET.Margin.Sensitive" /> property must be set for a margin to raise this event.</remarks>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.MarginRightClick">
            <summary>
            Occurs when the mouse was right-clicked inside a margin that was marked as sensitive.
            </summary>
            <remarks>The <see cref="P:ScintillaNET.Margin.Sensitive" /> property and <see cref="F:ScintillaNET.PopupMode.Text" /> must be set for a margin to raise this event.</remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.UsePopup(ScintillaNET.PopupMode)" />
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.ModifyAttempt">
            <summary>
            Occurs when a user attempts to change text while the document is in read-only mode.
            </summary>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.ReadOnly" />
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.NeedShown">
            <summary>
            Occurs when the control determines hidden text needs to be shown.
            </summary>
            <remarks>An example of when this event might be raised is if the end of line of a contracted fold point is deleted.</remarks>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.Paint">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.Painted">
            <summary>
            Occurs when painting has just been done.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.SavePointLeft">
            <summary>
            Occurs when the document becomes 'dirty'.
            </summary>
            <remarks>The document 'dirty' state can be checked with the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Modified" /> property and reset by calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetSavePoint" />.</remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetSavePoint" />
            <seealso cref="E:ScintillaNET.WPF.ScintillaWPF.SavePointReached" />
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.SavePointReached">
            <summary>
            Occurs when the document 'dirty' flag is reset.
            </summary>
            <remarks>The document 'dirty' state can be reset by calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetSavePoint" /> or undoing an action that modified the document.</remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetSavePoint" />
            <seealso cref="E:ScintillaNET.WPF.ScintillaWPF.SavePointLeft" />
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.StyleNeeded">
            <summary>
            Occurs when the control is about to display or print text and requires styling.
            </summary>
            <remarks>
            This event is only raised when <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" /> is set to <see cref="F:ScintillaNET.Lexer.Container" />.
            The last position styled correctly can be determined by calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.GetEndStyled" />.
            </remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.GetEndStyled" />
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.UpdateUI">
            <summary>
            Occurs when the control UI is updated as a result of changes to text (including styling),
            selection, and/or scroll positions.
            </summary>
        </member>
        <member name="E:ScintillaNET.WPF.ScintillaWPF.ZoomChanged">
            <summary>
            Occurs when the user zooms the display using the keyboard or the <see cref="P:ScintillaNET.WPF.ScintillaWPF.Zoom" /> property is changed.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AddRefDocument(ScintillaNET.Document)">
            <summary>
            Increases the reference count of the specified document by 1.
            </summary>
            <param name="document">The document reference count to increase.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AddSelection(System.Int32,System.Int32)">
            <summary>
            Adds an additional selection range to the existing main selection.
            </summary>
            <param name="caret">The zero-based document position to end the selection.</param>
            <param name="anchor">The zero-based document position to start the selection.</param>
            <remarks>A main selection must first have been set by a call to <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetSelection(System.Int32,System.Int32)" />.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AddText(System.String)">
            <summary>
            Inserts the specified text at the current caret position.
            </summary>
            <param name="text">The text to insert at the current caret position.</param>
            <remarks>The caret position is set to the end of the inserted text, but it is not scrolled into view.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AnnotationClearAll">
            <summary>
            Removes the annotation text for every <see cref="T:ScintillaNET.Line" /> in the document.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AppendText(System.String)">
            <summary>
            Adds the specified text to the end of the document.
            </summary>
            <param name="text">The text to add to the document.</param>
            <remarks>The current selection is not changed and the new text is not scrolled into view.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AssignCmdKey(System.Windows.Forms.Keys,ScintillaNET.Command)">
            <summary>
            Assigns the specified key definition to a <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> command.
            </summary>
            <param name="keyDefinition">The key combination to bind.</param>
            <param name="sciCommand">The command to assign.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AutoCCancel">
            <summary>
            Cancels any displayed autocompletion list.
            </summary>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.AutoCStops(System.String)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AutoCComplete">
            <summary>
            Triggers completion of the current autocompletion word.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AutoCSelect(System.String)">
            <summary>
            Selects an item in the autocompletion list.
            </summary>
            <param name="select">
            The autocompletion word to select.
            If found, the word in the autocompletion list is selected and the index can be obtained by calling <see cref="P:ScintillaNET.WPF.ScintillaWPF.AutoCCurrent" />.
            If not found, the behavior is determined by <see cref="P:ScintillaNET.WPF.ScintillaWPF.AutoCAutoHide" />.
            </param>
            <remarks>
            Comparisons are performed according to the <see cref="P:ScintillaNET.WPF.ScintillaWPF.AutoCIgnoreCase" /> property
            and will match the first word starting with <paramref name="select" />.
            </remarks>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.AutoCCurrent" />
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.AutoCAutoHide" />
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.AutoCIgnoreCase" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AutoCSetFillUps(System.String)">
            <summary>
            Sets the characters that, when typed, cause the autocompletion item to be added to the document.
            </summary>
            <param name="chars">A string of characters that trigger autocompletion. The default is null.</param>
            <remarks>Common fillup characters are '(', '[', and '.' depending on the language.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AutoCShow(System.Int32,System.String)">
            <summary>
            Displays an auto completion list.
            </summary>
            <param name="lenEntered">The number of characters already entered to match on.</param>
            <param name="list">A list of autocompletion words separated by the <see cref="P:ScintillaNET.WPF.ScintillaWPF.AutoCSeparator" /> character.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.AutoCStops(System.String)">
            <summary>
            Specifies the characters that will automatically cancel autocompletion without the need to call <see cref="M:ScintillaNET.WPF.ScintillaWPF.AutoCCancel" />.
            </summary>
            <param name="chars">A String of the characters that will cancel autocompletion. The default is empty.</param>
            <remarks>Characters specified should be limited to printable ASCII characters.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.BeginUndoAction">
            <summary>
            Marks the beginning of a set of actions that should be treated as a single undo action.
            </summary>
            <remarks>A call to <see cref="M:ScintillaNET.WPF.ScintillaWPF.BeginUndoAction" /> should be followed by a call to <see cref="M:ScintillaNET.WPF.ScintillaWPF.EndUndoAction" />.</remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.EndUndoAction" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.BraceBadLight(System.Int32)">
            <summary>
            Styles the specified character position with the <see cref="F:ScintillaNET.Style.BraceBad" /> style when there is an unmatched brace.
            </summary>
            <param name="position">The zero-based document position of the unmatched brace character or <seealso cref="F:ScintillaNET.WPF.ScintillaWPF.InvalidPosition"/> to remove the highlight.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.BraceHighlight(System.Int32,System.Int32)">
            <summary>
            Styles the specified character positions with the <see cref="F:ScintillaNET.Style.BraceLight" /> style.
            </summary>
            <param name="position1">The zero-based document position of the open brace character.</param>
            <param name="position2">The zero-based document position of the close brace character.</param>
            <remarks>Brace highlighting can be removed by specifying <see cref="F:ScintillaNET.WPF.ScintillaWPF.InvalidPosition" /> for <paramref name="position1" /> and <paramref name="position2" />.</remarks>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.HighlightGuide" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.BraceMatch(System.Int32)">
            <summary>
            Finds a corresponding matching brace starting at the position specified.
            The brace characters handled are '(', ')', '[', ']', '{', '}', '&lt;', and '&gt;'.
            </summary>
            <param name="position">The zero-based document position of a brace character to start the search from for a matching brace character.</param>
            <returns>The zero-based document position of the corresponding matching brace or <see cref="F:ScintillaNET.WPF.ScintillaWPF.InvalidPosition" /> it no matching brace could be found.</returns>
            <remarks>A match only occurs if the style of the matching brace is the same as the starting brace. Nested braces are handled correctly.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CallTipCancel">
            <summary>
            Cancels the display of a call tip window.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CallTipSetForeHlt(System.Windows.Media.Color)">
            <summary>
            Sets the color of highlighted text in a call tip.
            </summary>
            <param name="color">The new highlight text Color. The default is dark blue.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CallTipSetHlt(System.Int32,System.Int32)">
            <summary>
            Sets the specified range of the call tip text to display in a highlighted style.
            </summary>
            <param name="hlStart">The zero-based index in the call tip text to start highlighting.</param>
            <param name="hlEnd">The zero-based index in the call tip text to stop highlighting (exclusive).</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CallTipSetPosition(System.Boolean)">
            <summary>
            Determines whether to display a call tip above or below text.
            </summary>
            <param name="above">true to display above text; otherwise, false. The default is false.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CallTipShow(System.Int32,System.String)">
            <summary>
            Displays a call tip window.
            </summary>
            <param name="posStart">The zero-based document position where the call tip window should be aligned.</param>
            <param name="definition">The call tip text.</param>
            <remarks>
            Call tips can contain multiple lines separated by '\n' characters. Do not include '\r', as this will most likely print as an empty box.
            The '\t' character is supported and the size can be set by using <see cref="M:ScintillaNET.WPF.ScintillaWPF.CallTipTabSize(System.Int32)" />.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CallTipTabSize(System.Int32)">
            <summary>
            Sets the call tip tab size in pixels.
            </summary>
            <param name="tabSize">The width in pixels of a tab '\t' character in a call tip. Specifying 0 disables special treatment of tabs.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ChangeLexerState(System.Int32,System.Int32)">
            <summary>
            Indicates to the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" /> that the internal lexer state has changed in the specified
            range and therefore may need to be redrawn.
            </summary>
            <param name="startPos">The zero-based document position at which the lexer state change starts.</param>
            <param name="endPos">The zero-based document position at which the lexer state change ends.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CharPositionFromPoint(System.Int32,System.Int32)">
            <summary>
            Finds the closest character position to the specified display point.
            </summary>
            <param name="x">The x pixel coordinate within the client rectangle of the control.</param>
            <param name="y">The y pixel coordinate within the client rectangle of the control.</param>
            <returns>The zero-based document position of the nearest character to the point specified.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CharPositionFromPointClose(System.Int32,System.Int32)">
            <summary>
            Finds the closest character position to the specified display point or returns -1
            if the point is outside the window or not close to any characters.
            </summary>
            <param name="x">The x pixel coordinate within the client rectangle of the control.</param>
            <param name="y">The y pixel coordinate within the client rectangle of the control.</param>
            <returns>The zero-based document position of the nearest character to the point specified when near a character; otherwise, -1.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ChooseCaretX">
            <summary>
            Explicitly sets the current horizontal offset of the caret as the X position to track
            when the user moves the caret vertically using the up and down keys.
            </summary>
            <remarks>
            When not set explicitly, Scintilla automatically sets this value each time the user moves
            the caret horizontally.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.Clear">
            <summary>
            Removes the selected text from the document.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ClearAll">
            <summary>
            Deletes all document text, unless the document is read-only.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ClearCmdKey(System.Windows.Forms.Keys)">
            <summary>
            Makes the specified key definition do nothing.
            </summary>
            <param name="keyDefinition">The key combination to bind.</param>
            <remarks>This is equivalent to binding the keys to <see cref="F:ScintillaNET.Command.Null" />.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ClearAllCmdKeys">
            <summary>
            Removes all the key definition command mappings.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ClearDocumentStyle">
            <summary>
            Removes all styling from the document and resets the folding state.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ClearRegisteredImages">
            <summary>
            Removes all images registered for autocompletion lists.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ClearSelections">
            <summary>
            Sets a single empty selection at the start of the document.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.Colorize(System.Int32,System.Int32)">
            <summary>
            Requests that the current lexer restyle the specified range.
            </summary>
            <param name="startPos">The zero-based document position at which to start styling.</param>
            <param name="endPos">The zero-based document position at which to stop styling (exclusive).</param>
            <remarks>This will also cause fold levels in the range specified to be reset.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ConvertEols(ScintillaNET.Eol)">
            <summary>
            Changes all end-of-line characters in the document to the format specified.
            </summary>
            <param name="eolMode">One of the <see cref="T:ScintillaNET.Eol" /> enumeration values.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.Copy">
            <summary>
            Copies the selected text from the document and places it on the clipboard.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.Copy(ScintillaNET.CopyFormat)">
            <summary>
            Copies the selected text from the document and places it on the clipboard.
            </summary>
            <param name="format">One of the <see cref="T:ScintillaNET.CopyFormat" /> enumeration values.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CopyAllowLine">
            <summary>
            Copies the selected text from the document and places it on the clipboard.
            If the selection is empty the current line is copied.
            </summary>
            <remarks>
            If the selection is empty and the current line copied, an extra "MSDEVLineSelect" marker is added to the
            clipboard which is then used in <see cref="M:ScintillaNET.WPF.ScintillaWPF.Paste" /> to paste the whole line before the current line.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CopyAllowLine(ScintillaNET.CopyFormat)">
            <summary>
            Copies the selected text from the document and places it on the clipboard.
            If the selection is empty the current line is copied.
            </summary>
            <param name="format">One of the <see cref="T:ScintillaNET.CopyFormat" /> enumeration values.</param>
            <remarks>
            If the selection is empty and the current line copied, an extra "MSDEVLineSelect" marker is added to the
            clipboard which is then used in <see cref="M:ScintillaNET.WPF.ScintillaWPF.Paste" /> to paste the whole line before the current line.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CopyRange(System.Int32,System.Int32)">
            <summary>
            Copies the specified range of text to the clipboard.
            </summary>
            <param name="start">The zero-based character position in the document to start copying.</param>
            <param name="end">The zero-based character position (exclusive) in the document to stop copying.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CopyRange(System.Int32,System.Int32,ScintillaNET.CopyFormat)">
            <summary>
            Copies the specified range of text to the clipboard.
            </summary>
            <param name="start">The zero-based character position in the document to start copying.</param>
            <param name="end">The zero-based character position (exclusive) in the document to stop copying.</param>
            <param name="format">One of the <see cref="T:ScintillaNET.CopyFormat" /> enumeration values.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CreateDocument">
            <summary>
            Create a new, empty document.
            </summary>
            <returns>A new <see cref="P:ScintillaNET.WPF.ScintillaWPF.Document" /> with a reference count of 1.</returns>
            <remarks>You are responsible for ensuring the reference count eventually reaches 0 or memory leaks will occur.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.CreateLoader(System.Int32)">
            <summary>
            Creates an <see cref="T:ScintillaNET.ILoader" /> object capable of loading a <see cref="P:ScintillaNET.WPF.ScintillaWPF.Document" /> on a background (non-UI) thread.
            </summary>
            <param name="length">The initial number of characters to allocate.</param>
            <returns>A new <see cref="T:ScintillaNET.ILoader" /> object, or null if the loader could not be created.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.Cut">
            <summary>
            Cuts the selected text from the document and places it on the clipboard.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.DeleteRange(System.Int32,System.Int32)">
            <summary>
            Deletes a range of text from the document.
            </summary>
            <param name="position">The zero-based character position to start deleting.</param>
            <param name="length">The number of characters to delete.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.DescribeKeywordSets">
            <summary>
            Retrieves a description of keyword sets supported by the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.
            </summary>
            <returns>A String describing each keyword set separated by line breaks for the current lexer.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.DescribeProperty(System.String)">
            <summary>
            Retrieves a brief description of the specified property name for the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.
            </summary>
            <param name="name">A property name supported by the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.</param>
            <returns>A String describing the lexer property name if found; otherwise, String.Empty.</returns>
            <remarks>A list of supported property names for the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" /> can be obtained by calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.PropertyNames" />.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.DirectMessage(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message directly to the native Scintilla window,
            bypassing any managed APIs.
            </summary>
            <param name="msg">The message ID.</param>
            <param name="wParam">The message <c>wparam</c> field.</param>
            <param name="lParam">The message <c>lparam</c> field.</param>
            <returns>An <see cref="T:System.IntPtr"/> representing the result of the message request.</returns>
            <remarks>This API supports the Scintilla infrastructure and is not intended to be used directly from your code.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.DocLineFromVisible(System.Int32)">
            <summary>
            Returns the zero-based document line index from the specified display line index.
            </summary>
            <param name="displayLine">The zero-based display line index.</param>
            <returns>The zero-based document line index.</returns>
            <seealso cref="P:ScintillaNET.Line.DisplayIndex" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.DropSelection(System.Int32)">
            <summary>
            If there are multiple selections, removes the specified selection.
            </summary>
            <param name="selection">The zero-based selection index.</param>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.Selections" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.EmptyUndoBuffer">
            <summary>
            Clears any undo or redo history.
            </summary>
            <remarks>This will also cause <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetSavePoint" /> to be called but will not raise the <see cref="E:ScintillaNET.WPF.ScintillaWPF.SavePointReached" /> event.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.EndUndoAction">
            <summary>
            Marks the end of a set of actions that should be treated as a single undo action.
            </summary>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.BeginUndoAction" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ExecuteCmd(ScintillaNET.Command)">
            <summary>
            Performs the specified <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" />command.
            </summary>
            <param name="sciCommand">The command to perform.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.FoldAll(ScintillaNET.FoldAction)">
            <summary>
            Performs the specified fold action on the entire document.
            </summary>
            <param name="action">One of the <see cref="T:ScintillaNET.FoldAction" /> enumeration values.</param>
            <remarks>When using <see cref="F:ScintillaNET.FoldAction.Toggle" /> the first fold header in the document is examined to decide whether to expand or contract.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.FoldDisplayTextSetStyle(ScintillaNET.FoldDisplayText)">
            <summary>
            Changes the appearance of fold text tags.
            </summary>
            <param name="style">One of the <see cref="T:ScintillaNET.FoldDisplayText" /> enumeration values.</param>
            <remarks>The text tag to display on a folded line can be set using <see cref="M:ScintillaNET.Line.ToggleFoldShowText(System.String)" />.</remarks>
            <seealso cref="M:ScintillaNET.Line.ToggleFoldShowText(System.String)" />.
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetCharAt(System.Int32)">
            <summary>
            Returns the character as the specified document position.
            </summary>
            <param name="position">The zero-based document position of the character to get.</param>
            <returns>The character at the specified <paramref name="position" />.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetColumn(System.Int32)">
            <summary>
            Returns the column number of the specified document position, taking the width of tabs into account.
            </summary>
            <param name="position">The zero-based document position to get the column for.</param>
            <returns>The number of columns from the start of the line to the specified document <paramref name="position" />.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetEndStyled">
            <summary>
            Returns the last document position likely to be styled correctly.
            </summary>
            <returns>The zero-based document position of the last styled character.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetProperty(System.String)">
            <summary>
            Lookup a property value for the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.
            </summary>
            <param name="name">The property name to lookup.</param>
            <returns>
            A String representing the property value if found; otherwise, String.Empty.
            Any embedded property name macros as described in <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetProperty(System.String,System.String)" /> will not be replaced (expanded).
            </returns>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.GetPropertyExpanded(System.String)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetPropertyExpanded(System.String)">
            <summary>
            Lookup a property value for the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" /> and expand any embedded property macros.
            </summary>
            <param name="name">The property name to lookup.</param>
            <returns>
            A String representing the property value if found; otherwise, String.Empty.
            Any embedded property name macros as described in <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetProperty(System.String,System.String)" /> will be replaced (expanded).
            </returns>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.GetProperty(System.String)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetPropertyInt(System.String,System.Int32)">
            <summary>
            Lookup a property value for the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" /> and convert it to an integer.
            </summary>
            <param name="name">The property name to lookup.</param>
            <param name="defaultValue">A default value to return if the property name is not found or has no value.</param>
            <returns>
            An Integer representing the property value if found;
            otherwise, <paramref name="defaultValue" /> if not found or the property has no value;
            otherwise, 0 if the property is not a number.
            </returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetStyleAt(System.Int32)">
            <summary>
            Gets the style of the specified document position.
            </summary>
            <param name="position">The zero-based document position of the character to get the style for.</param>
            <returns>The zero-based <see cref="T:ScintillaNET.Style" /> index used at the specified <paramref name="position" />.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetTag(System.Int32)">
            <summary>
            Returns the capture group text of the most recent regular expression search.
            </summary>
            <param name="tagNumber">The capture group (1 through 9) to get the text for.</param>
            <returns>A String containing the capture group text if it participated in the match; otherwise, an empty string.</returns>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SearchInTarget(System.String)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetTextRange(System.Int32,System.Int32)">
            <summary>
            Gets a range of text from the document.
            </summary>
            <param name="position">The zero-based starting character position of the range to get.</param>
            <param name="length">The number of characters to get.</param>
            <returns>A string representing the text range.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetTextRangeAsHtml(System.Int32,System.Int32)">
            <summary>
            Gets a range of text from the document formatted as Hypertext Markup Language (HTML).
            </summary>
            <param name="position">The zero-based starting character position of the range to get.</param>
            <param name="length">The number of characters to get.</param>
            <returns>A string representing the text range formatted as HTML.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetVersionInfo">
            <summary>
            Returns the version information of the native Scintilla library.
            </summary>
            <returns>An object representing the version information of the native Scintilla library.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GetWordFromPosition(System.Int32)">
            <summary>
             Gets the word from the position specified.
             </summary>
             <param name="position">The zero-based document character position to get the word from.</param>
             <returns>The word at the specified position.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.GotoPosition(System.Int32)">
            <summary>
            Navigates the caret to the document position specified.
            </summary>
            <param name="position">The zero-based document character position to navigate to.</param>
            <remarks>Any selection is discarded.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.HideLines(System.Int32,System.Int32)">
            <summary>
            Hides the range of lines specified.
            </summary>
            <param name="lineStart">The zero-based index of the line range to start hiding.</param>
            <param name="lineEnd">The zero-based index of the line range to end hiding.</param>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.ShowLines(System.Int32,System.Int32)" />
            <seealso cref="P:ScintillaNET.Line.Visible" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.IndicatorAllOnFor(System.Int32)">
            <summary>
            Returns a bitmap representing the 32 indicators in use at the specified position.
            </summary>
            <param name="position">The zero-based character position within the document to test.</param>
            <returns>A bitmap indicating which of the 32 indicators are in use at the specified <paramref name="position" />.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.IndicatorClearRange(System.Int32,System.Int32)">
            <summary>
            Removes the <see cref="P:ScintillaNET.WPF.ScintillaWPF.IndicatorCurrent" /> indicator (and user-defined value) from the specified range of text.
            </summary>
            <param name="position">The zero-based character position within the document to start clearing.</param>
            <param name="length">The number of characters to clear.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.IndicatorFillRange(System.Int32,System.Int32)">
            <summary>
            Adds the <see cref="P:ScintillaNET.WPF.ScintillaWPF.IndicatorCurrent" /> indicator and <see cref="P:ScintillaNET.WPF.ScintillaWPF.IndicatorValue" /> value to the specified range of text.
            </summary>
            <param name="position">The zero-based character position within the document to start filling.</param>
            <param name="length">The number of characters to fill.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.InsertText(System.Int32,System.String)">
            <summary>
            Inserts text at the specified position.
            </summary>
            <param name="position">The zero-based character position to insert the text. Specify -1 to use the current caret position.</param>
            <param name="text">The text to insert into the document.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="position" /> less than zero and not equal to -1. -or-
            <paramref name="position" /> is greater than the document length.
            </exception>
            <remarks>No scrolling is performed.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.IsRangeWord(System.Int32,System.Int32)">
            <summary>
            Determines whether the specified <paramref name="start" /> and <paramref name="end" /> positions are
            at the beginning and end of a word, respectively.
            </summary>
            <param name="start">The zero-based document position of the possible word start.</param>
            <param name="end">The zero-based document position of the possible word end.</param>
            <returns>
            true if <paramref name="start" /> and <paramref name="end" /> are at the beginning and end of a word, respectively;
            otherwise, false.
            </returns>
            <remarks>
            This method does not check whether there is whitespace in the search range,
            only that the <paramref name="start" /> and <paramref name="end" /> are at word boundaries.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.LineFromPosition(System.Int32)">
            <summary>
            Returns the line that contains the document position specified.
            </summary>
            <param name="position">The zero-based document character position.</param>
            <returns>The zero-based document line index containing the character <paramref name="position" />.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.LineScroll(System.Int32,System.Int32)">
            <summary>
            Scrolls the display the number of lines and columns specified.
            </summary>
            <param name="lines">The number of lines to scroll.</param>
            <param name="columns">The number of columns to scroll.</param>
            <remarks>
            Negative values scroll in the opposite direction.
            A column is the width in pixels of a space character in the <see cref="F:ScintillaNET.Style.Default" /> style.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.LoadLexerLibrary(System.String)">
            <summary>
            Loads a <see cref="P:ScintillaNET.WPF.ScintillaWPF.Scintilla" /> compatible lexer from an external DLL.
            </summary>
            <param name="path">The path to the external lexer DLL.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.MarkerDeleteAll(System.Int32)">
            <summary>
            Removes the specified marker from all lines.
            </summary>
            <param name="marker">The zero-based <see cref="T:ScintillaNET.Marker" /> index to remove from all lines, or -1 to remove all markers from all lines.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.MarkerDeleteHandle(ScintillaNET.MarkerHandle)">
            <summary>
            Searches the document for the marker handle and deletes the marker if found.
            </summary>
            <param name="markerHandle">The <see cref="T:ScintillaNET.MarkerHandle" /> created by a previous call to <see cref="M:ScintillaNET.Line.MarkerAdd(System.Int32)" /> of the marker to delete.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.MarkerEnableHighlight(System.Boolean)">
            <summary>
            Enable or disable highlighting of the current folding block.
            </summary>
            <param name="enabled">true to highlight the current folding block; otherwise, false.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.MarkerLineFromHandle(ScintillaNET.MarkerHandle)">
            <summary>
            Searches the document for the marker handle and returns the line number containing the marker if found.
            </summary>
            <param name="markerHandle">The <see cref="T:ScintillaNET.MarkerHandle" /> created by a previous call to <see cref="M:ScintillaNET.Line.MarkerAdd(System.Int32)" /> of the marker to search for.</param>
            <returns>If found, the zero-based line index containing the marker; otherwise, -1.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.MultiEdgeAddLine(System.Int32,System.Windows.Media.Color)">
            <summary>
            Specifies the long line indicator column number and color when <see cref="P:ScintillaNET.WPF.ScintillaWPF.EdgeMode" /> is <see cref="F:ScintillaNET.EdgeMode.MultiLine" />.
            </summary>
            <param name="column">The zero-based column number to indicate.</param>
            <param name="edgeColor">The color of the vertical long line indicator.</param>
            <remarks>A column is defined as the width of a space character in the <see cref="F:ScintillaNET.Style.Default" /> style.</remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.MultiEdgeClearAll" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.MultiEdgeClearAll">
            <summary>
            Removes all the long line column indicators specified using <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.MultiEdgeAddLine(System.Int32,System.Windows.Media.Color)" />.
            </summary>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.MultiEdgeAddLine(System.Int32,System.Windows.Media.Color)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.MultipleSelectAddEach">
            <summary>
            Searches for all instances of the main selection within the <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" />
            range and adds any matches to the selection.
            </summary>
            <remarks>
            The <see cref="P:ScintillaNET.WPF.ScintillaWPF.SearchFlags" /> property is respected when searching, allowing additional
            selections to match on different case sensitivity and word search options.
            </remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.MultipleSelectAddNext" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.MultipleSelectAddNext">
            <summary>
            Searches for the next instance of the main selection within the <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" />
            range and adds any match to the selection.
            </summary>
            <remarks>
            The <see cref="P:ScintillaNET.WPF.ScintillaWPF.SearchFlags" /> property is respected when searching, allowing additional
            selections to match on different case sensitivity and word search options.
            </remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.MultipleSelectAddNext" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.Paste">
            <summary>
            Pastes the contents of the clipboard into the current selection.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.PointXFromPosition(System.Int32)">
            <summary>
            Returns the X display pixel location of the specified document position.
            </summary>
            <param name="pos">The zero-based document character position.</param>
            <returns>The x-coordinate of the specified <paramref name="pos" /> within the client rectangle of the control.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.PointYFromPosition(System.Int32)">
            <summary>
            Returns the Y display pixel location of the specified document position.
            </summary>
            <param name="pos">The zero-based document character position.</param>
            <returns>The y-coordinate of the specified <paramref name="pos" /> within the client rectangle of the control.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.PropertyNames">
            <summary>
            Retrieves a list of property names that can be set for the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.
            </summary>
            <returns>A String of property names separated by line breaks.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.PropertyType(System.String)">
            <summary>
            Retrieves the data type of the specified property name for the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.
            </summary>
            <param name="name">A property name supported by the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.</param>
            <returns>One of the <see cref="M:ScintillaNET.WPF.ScintillaWPF.PropertyType(System.String)" /> enumeration values. The default is <see cref="F:ScintillaNET.PropertyType.Boolean" />.</returns>
            <remarks>A list of supported property names for the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" /> can be obtained by calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.PropertyNames" />.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.Redo">
            <summary>
            Redoes the effect of an <see cref="M:ScintillaNET.WPF.ScintillaWPF.Undo" /> operation.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.RegisterRgbaImage(System.Int32,System.Drawing.Bitmap)">
            <summary>
            Maps the specified image to a type identifer for use in an autocompletion list.
            </summary>
            <param name="type">The numeric identifier for this image.</param>
            <param name="image">The Bitmap to use in an autocompletion list.</param>
            <remarks>
            The <paramref name="image" /> registered can be referenced by its <paramref name="type" /> identifer in an autocompletion
            list by suffixing a word with the <see cref="P:ScintillaNET.WPF.ScintillaWPF.AutoCTypeSeparator" /> character and the <paramref name="type" /> value. e.g.
            "int?2 long?3 short?1" etc....
            </remarks>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.AutoCTypeSeparator" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ReleaseDocument(ScintillaNET.Document)">
            <summary>
            Decreases the reference count of the specified document by 1.
            </summary>
            <param name="document">
            The document reference count to decrease.
            When a document's reference count reaches 0 it is destroyed and any associated memory released.
            </param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ReplaceSelection(System.String)">
            <summary>
            Replaces the current selection with the specified text.
            </summary>
            <param name="text">The text that should replace the current selection.</param>
            <remarks>
            If there is not a current selection, the text will be inserted at the current caret position.
            Following the operation the caret is placed at the end of the inserted text and scrolled into view.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ReplaceTarget(System.String)">
            <summary>
            Replaces the target defined by <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" /> with the specified <paramref name="text" />.
            </summary>
            <param name="text">The text that will replace the current target.</param>
            <returns>The length of the replaced text.</returns>
            <remarks>
            The <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" /> properties will be updated to the start and end positions of the replaced text.
            The recommended way to delete text in the document is to set the target range to be removed and replace the target with an empty string.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ReplaceTargetRe(System.String)">
            <summary>
            Replaces the target text defined by <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" /> with the specified value after first substituting
            "\1" through "\9" macros in the <paramref name="text" /> with the most recent regular expression capture groups.
            </summary>
            <param name="text">The text containing "\n" macros that will be substituted with the most recent regular expression capture groups and then replace the current target.</param>
            <returns>The length of the replaced text.</returns>
            <remarks>
            The "\0" macro will be substituted by the entire matched text from the most recent search.
            The <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" /> properties will be updated to the start and end positions of the replaced text.
            </remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.GetTag(System.Int32)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.RotateSelection">
            <summary>
            Makes the next selection the main selection.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ScrollCaret">
            <summary>
            Scrolls the current position into view, if it is not already visible.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ScrollRange(System.Int32,System.Int32)">
            <summary>
            Scrolls the specified range into view.
            </summary>
            <param name="start">The zero-based document start position to scroll to.</param>
            <param name="end">
            The zero-based document end position to scroll to if doing so does not cause the <paramref name="start" />
            position to scroll out of view.
            </param>
            <remarks>This may be used to make a search match visible.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SearchInTarget(System.String)">
            <summary>
            Searches for the first occurrence of the specified text in the target defined by <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" />.
            </summary>
            <param name="text">The text to search for. The interpretation of the text (i.e. whether it is a regular expression) is defined by the <see cref="P:ScintillaNET.WPF.ScintillaWPF.SearchFlags" /> property.</param>
            <returns>The zero-based start position of the matched text within the document if successful; otherwise, -1.</returns>
            <remarks>
            If successful, the <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" /> properties will be updated to the start and end positions of the matched text.
            Searching can be performed in reverse using a <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> greater than the <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" />.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SelectAll">
            <summary>
            Selects all the text in the document.
            </summary>
            <remarks>The current position is not scrolled into view.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetAdditionalSelBack(System.Windows.Media.Color)">
            <summary>
            Sets the background color of additional selections.
            </summary>
            <param name="color">Additional selections background color.</param>
            <remarks>Calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetSelectionBackColor(System.Boolean,System.Windows.Media.Color)" /> will reset the <paramref name="color" /> specified.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetAdditionalSelFore(System.Windows.Media.Color)">
            <summary>
            Sets the foreground color of additional selections.
            </summary>
            <param name="color">Additional selections foreground color.</param>
            <remarks>Calling <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetSelectionForeColor(System.Boolean,System.Windows.Media.Color)" /> will reset the <paramref name="color" /> specified.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetEmptySelection(System.Int32)">
            <summary>
            Removes any selection and places the caret at the specified position.
            </summary>
            <param name="pos">The zero-based document position to place the caret at.</param>
            <remarks>The caret is not scrolled into view.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetFoldFlags(ScintillaNET.FoldFlags)">
            <summary>
            Sets additional options for displaying folds.
            </summary>
            <param name="flags">A bitwise combination of the <see cref="T:ScintillaNET.FoldFlags" /> enumeration.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetFoldMarginColor(System.Boolean,System.Windows.Media.Color)">
            <summary>
            Sets a global override to the fold margin color.
            </summary>
            <param name="use">true to override the fold margin color; otherwise, false.</param>
            <param name="color">The global fold margin color.</param>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetFoldMarginHighlightColor(System.Boolean,System.Windows.Media.Color)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetFoldMarginHighlightColor(System.Boolean,System.Windows.Media.Color)">
            <summary>
            Sets a global override to the fold margin highlight color.
            </summary>
            <param name="use">true to override the fold margin highlight color; otherwise, false.</param>
            <param name="color">The global fold margin highlight color.</param>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetFoldMarginColor(System.Boolean,System.Windows.Media.Color)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetKeywords(System.Int32,System.String)">
            <summary>
            Updates a keyword set used by the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.
            </summary>
            <param name="set">The zero-based index of the keyword set to update.</param>
            <param name="keywords">
            A list of keywords pertaining to the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" /> separated by whitespace (space, tab, '\n', '\r') characters.
            </param>
            <remarks>The keywords specified will be styled according to the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.</remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.DescribeKeywordSets" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetProperty(System.String,System.String)">
            <summary>
            Passes the specified property name-value pair to the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />.
            </summary>
            <param name="name">The property name to set.</param>
            <param name="value">
            The property value. Values can refer to other property names using the syntax $(name), where 'name' is another property
            name for the current <see cref="P:ScintillaNET.WPF.ScintillaWPF.Lexer" />. When the property value is retrieved by a call to <see cref="M:ScintillaNET.WPF.ScintillaWPF.GetPropertyExpanded(System.String)" />
            the embedded property name macro will be replaced (expanded) with that current property value.
            </param>
            <remarks>Property names are case-sensitive.</remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetSavePoint">
            <summary>
            Marks the document as unmodified.
            </summary>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.Modified" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetSel(System.Int32,System.Int32)">
            <summary>
            Sets the anchor and current position.
            </summary>
            <param name="anchorPos">The zero-based document position to start the selection.</param>
            <param name="currentPos">The zero-based document position to end the selection.</param>
            <remarks>
            A negative value for <paramref name="currentPos" /> signifies the end of the document.
            A negative value for <paramref name="anchorPos" /> signifies no selection (i.e. sets the <paramref name="anchorPos" />
            to the same position as the <paramref name="currentPos" />).
            The current position is scrolled into view following this operation.
            </remarks>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetSelection(System.Int32,System.Int32)">
            <summary>
            Sets a single selection from anchor to caret.
            </summary>
            <param name="caret">The zero-based document position to end the selection.</param>
            <param name="anchor">The zero-based document position to start the selection.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetSelectionBackColor(System.Boolean,System.Windows.Media.Color)">
            <summary>
            Sets a global override to the selection background color.
            </summary>
            <param name="use">true to override the selection background color; otherwise, false.</param>
            <param name="color">The global selection background color.</param>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetSelectionForeColor(System.Boolean,System.Windows.Media.Color)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetSelectionForeColor(System.Boolean,System.Windows.Media.Color)">
            <summary>
            Sets a global override to the selection foreground color.
            </summary>
            <param name="use">true to override the selection foreground color; otherwise, false.</param>
            <param name="color">The global selection foreground color.</param>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetSelectionBackColor(System.Boolean,System.Windows.Media.Color)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetStyling(System.Int32,System.Int32)">
            <summary>
            Styles the specified length of characters.
            </summary>
            <param name="length">The number of characters to style.</param>
            <param name="style">The <see cref="T:ScintillaNET.Style" /> definition index to assign each character.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length" /> or <paramref name="style" /> is less than zero. -or-
            The sum of a preceeding call to <see cref="M:ScintillaNET.WPF.ScintillaWPF.StartStyling(System.Int32)" /> or <see name="SetStyling" /> and <paramref name="length" /> is greater than the document length. -or-
            <paramref name="style" /> is greater than or equal to the number of style definitions.
            </exception>
            <remarks>
            The styling position is advanced by <paramref name="length" /> after each call allowing multiple
            calls to <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetStyling(System.Int32,System.Int32)" /> for a single call to <see cref="M:ScintillaNET.WPF.ScintillaWPF.StartStyling(System.Int32)" />.
            </remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.StartStyling(System.Int32)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetTargetRange(System.Int32,System.Int32)">
            <summary>
            Sets the <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" /> properties in a single call.
            </summary>
            <param name="start">The zero-based character position within the document to start a search or replace operation.</param>
            <param name="end">The zero-based character position within the document to end a search or replace operation.</param>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" />
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetWhitespaceBackColor(System.Boolean,System.Windows.Media.Color)">
            <summary>
            Sets a global override to the whitespace background color.
            </summary>
            <param name="use">true to override the whitespace background color; otherwise, false.</param>
            <param name="color">The global whitespace background color.</param>
            <remarks>When not overridden globally, the whitespace background color is determined by the current lexer.</remarks>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.ViewWhitespace" />
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetWhitespaceForeColor(System.Boolean,System.Windows.Media.Color)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SetWhitespaceForeColor(System.Boolean,System.Windows.Media.Color)">
            <summary>
            Sets a global override to the whitespace foreground color.
            </summary>
            <param name="use">true to override the whitespace foreground color; otherwise, false.</param>
            <param name="color">The global whitespace foreground color.</param>
            <remarks>When not overridden globally, the whitespace foreground color is determined by the current lexer.</remarks>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.ViewWhitespace" />
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetWhitespaceBackColor(System.Boolean,System.Windows.Media.Color)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ShowLines(System.Int32,System.Int32)">
            <summary>
            Shows the range of lines specified.
            </summary>
            <param name="lineStart">The zero-based index of the line range to start showing.</param>
            <param name="lineEnd">The zero-based index of the line range to end showing.</param>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.HideLines(System.Int32,System.Int32)" />
            <seealso cref="P:ScintillaNET.Line.Visible" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.StartStyling(System.Int32)">
            <summary>
            Prepares for styling by setting the styling <paramref name="position" /> to start at.
            </summary>
            <param name="position">The zero-based character position in the document to start styling.</param>
            <remarks>
            After preparing the document for styling, use successive calls to <see cref="M:ScintillaNET.WPF.ScintillaWPF.SetStyling(System.Int32,System.Int32)" />
            to style the document.
            </remarks>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.SetStyling(System.Int32,System.Int32)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.StyleClearAll">
            <summary>
            Resets all style properties to those currently configured for the <see cref="F:ScintillaNET.Style.Default" /> style.
            </summary>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.StyleResetDefault" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.StyleResetDefault">
            <summary>
            Resets the <see cref="F:ScintillaNET.Style.Default" /> style to its initial state.
            </summary>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.StyleClearAll" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.SwapMainAnchorCaret">
            <summary>
            Moves the caret to the opposite end of the main selection.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.TargetFromSelection">
            <summary>
            Sets the <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" /> to the start and end positions of the selection.
            </summary>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.TargetWholeDocument" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.TargetWholeDocument">
            <summary>
            Sets the <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetStart" /> and <see cref="P:ScintillaNET.WPF.ScintillaWPF.TargetEnd" /> to the start and end positions of the document.
            </summary>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.TargetFromSelection" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.TextWidth(System.Int32,System.String)">
            <summary>
            Measures the width in pixels of the specified string when rendered in the specified style.
            </summary>
            <param name="style">The index of the <see cref="T:ScintillaNET.Style" /> to use when rendering the text to measure.</param>
            <param name="text">The text to measure.</param>
            <returns>The width in pixels.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.Undo">
            <summary>
            Undoes the previous action.
            </summary>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.UsePopup(System.Boolean)">
            <summary>
            Determines whether to show the right-click context menu.
            </summary>
            <param name="enablePopup">true to enable the popup window; otherwise, false.</param>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.UsePopup(ScintillaNET.PopupMode)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.UsePopup(ScintillaNET.PopupMode)">
            <summary>
            Determines the conditions for displaying the standard right-click context menu.
            </summary>
            <param name="popupMode">One of the <seealso cref="T:ScintillaNET.PopupMode" /> enumeration values.</param>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.WordEndPosition(System.Int32,System.Boolean)">
            <summary>
            Returns the position where a word ends, searching forward from the position specified.
            </summary>
            <param name="position">The zero-based document position to start searching from.</param>
            <param name="onlyWordCharacters">
            true to stop searching at the first non-word character regardless of whether the search started at a word or non-word character.
            false to use the first character in the search as a word or non-word indicator and then search for that word or non-word boundary.
            </param>
            <returns>The zero-based document postion of the word boundary.</returns>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.WordStartPosition(System.Int32,System.Boolean)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.WordStartPosition(System.Int32,System.Boolean)">
            <summary>
            Returns the position where a word starts, searching backward from the position specified.
            </summary>
            <param name="position">The zero-based document position to start searching from.</param>
            <param name="onlyWordCharacters">
            true to stop searching at the first non-word character regardless of whether the search started at a word or non-word character.
            false to use the first character in the search as a word or non-word indicator and then search for that word or non-word boundary.
            </param>
            <returns>The zero-based document postion of the word boundary.</returns>
            <seealso cref="M:ScintillaNET.WPF.ScintillaWPF.WordEndPosition(System.Int32,System.Boolean)" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ZoomIn">
            <summary>
            Increases the zoom factor by 1 until it reaches 20 points.
            </summary>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.Zoom" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.ZoomOut">
            <summary>
            Decreases the zoom factor by 1 until it reaches -10 points.
            </summary>
            <seealso cref="P:ScintillaNET.WPF.ScintillaWPF.Zoom" />
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.DrawingColor(System.Windows.Media.Color)">
            <summary>
            Converts a WPF color to a Winforms color
            </summary>
            <param name="color">A WPF color.</param>
            <returns>A Winforms color</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.MediaColor(System.Drawing.Color)">
            <summary>
            Converts a Winforms color to a WPF color
            </summary>
            <param name="color">A Winforms color</param>
            <returns>A WPF color.</returns>
        </member>
        <member name="M:ScintillaNET.WPF.ScintillaWPF.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:FlagsEnumTypeConverter.FlagsEnumConverter">
            <summary>
            Flags enumeration type converter.
            </summary>
        </member>
        <member name="T:FlagsEnumTypeConverter.FlagsEnumConverter.EnumFieldDescriptor">
            <summary>
            This class represents an enumeration field in the property grid.
            </summary>
        </member>
        <member name="F:FlagsEnumTypeConverter.FlagsEnumConverter.EnumFieldDescriptor.fContext">
            <summary>
            Stores the context which the enumeration field descriptor was created in.
            </summary>
        </member>
        <member name="M:FlagsEnumTypeConverter.FlagsEnumConverter.EnumFieldDescriptor.#ctor(System.Type,System.String,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Creates an instance of the enumeration field descriptor class.
            </summary>
            <param name="componentType">The type of the enumeration.</param>
            <param name="name">The name of the enumeration field.</param>
            <param name="context">The current context.</param>
        </member>
        <member name="M:FlagsEnumTypeConverter.FlagsEnumConverter.EnumFieldDescriptor.GetValue(System.Object)">
            <summary>
            Retrieves the value of the enumeration field.
            </summary>
            <param name="component">
            The instance of the enumeration type which to retrieve the field value for.
            </param>
            <returns>
            True if the enumeration field is included to the enumeration;
            otherwise, False.
            </returns>
        </member>
        <member name="M:FlagsEnumTypeConverter.FlagsEnumConverter.EnumFieldDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the enumeration field.
            </summary>
            <param name="component">
            The instance of the enumeration type which to set the field value to.
            </param>
            <param name="value">
            True if the enumeration field should included to the enumeration;
            otherwise, False.
            </param>
        </member>
        <member name="M:FlagsEnumTypeConverter.FlagsEnumConverter.EnumFieldDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Retrieves a value indicating whether the enumeration
            field is set to a non-default value.
            </summary>
        </member>
        <member name="M:FlagsEnumTypeConverter.FlagsEnumConverter.EnumFieldDescriptor.ResetValue(System.Object)">
            <summary>
            Resets the enumeration field to its default value.
            </summary>
        </member>
        <member name="M:FlagsEnumTypeConverter.FlagsEnumConverter.EnumFieldDescriptor.CanResetValue(System.Object)">
            <summary>
            Retrieves a value indicating whether the enumeration
            field can be reset to the default value.
            </summary>
        </member>
        <member name="M:FlagsEnumTypeConverter.FlagsEnumConverter.EnumFieldDescriptor.GetDefaultValue">
            <summary>
            Retrieves the enumerations field�s default value.
            </summary>
        </member>
        <member name="M:FlagsEnumTypeConverter.FlagsEnumConverter.#ctor(System.Type)">
            <summary>
            Creates an instance of the FlagsEnumConverter class.
            </summary>
            <param name="type">The type of the enumeration.</param>
        </member>
        <member name="M:FlagsEnumTypeConverter.FlagsEnumConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the property descriptors for the enumeration fields.
            These property descriptors will be used by the property grid
            to show separate enumeration fields.
            </summary>
            <param name="context">The current context.</param>
            <param name="value">A value of an enumeration type.</param>
        </member>
    </members>
</doc>
